//
// Copyright © 2003..2012 : Henk van Kampen <henk@mediatronix.com>
//
// This file is part of pBlazASM.
//
// pBlazASM is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// pBlazASM is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY// without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with pBlazASM.  If not, see <http://www.gnu.org/licenses/>.
//

// -------------------------------------------------------------------------------
// picoblaze soft I2C routines
// implements clock stretching
// 	CALL I2C_Delay	// defines the clockspeed
//	should be ~1.6us for 100kHz => @100MHz, 50 instructions per us => 80 instructions!
// -------------------------------------------------------------------------------

bSDA_In		.EQU	_I2C + _I2C0		// gets SDA level in Bit0
bSDA_0		.EQU	_I2C + _I2C0		// Pulls SDA to 0
bSDA_Z		.EQU	_I2C + _I2C1		// Relases SDA to float to 1
bSCL_0		.EQU    _I2C + _I2C2		// Pulls CSCL to 0
bSCL_Z		.EQU    _I2C + _I2C3		// Releases SCL to float to 1


// ---\              /--------\                                            /-- 
//     \  SDA       /          \                                          /
//      \----------/ \--------/ \----------------------------------------/
// -------\            /----\                                         /-------
//         \  SCL     /      \                                       /
//          \--------/        \-------------------------------------/
// | Start    |      Data bit     |                             |  Stop     |

		.IF	_I2C_
		
Init_I2C:	OUT	sF, bSDA_Z		// SDA = Z
		OUT	sF, bSCL_Z		// SCL = Z
		JUMP	I2C_Delay
		
// -------------------------------------------------------------------------------
// Routine to set up and read a buffer from I2C device
// s0: device code
// s4: buffer pointer
// s5: byte count
// -------------------------------------------------------------------------------
ReadX_I2C:
		CALL	ReadCtrlByte

ReadX_tail:
		SUB	s5, 1			// One less, at end one extra
		JUMP	Z, ReadX_last
	
		CALL	I2C_Recv		// Read 8 bits of data and send ack
		CALL	I2C_MAck
		ST	sC, s4
		ADD	s4, 1
		JUMP	ReadX_tail

ReadX_last:
		CALL	I2C_Recv		// Read extra 8 bits of data and send nack
		CALL	I2C_MNAck
		ST	sC, s4
		
		JUMP	I2C_Stop		// Send Stop
		
// -------------------------------------------------------------------------------
// Routine to set up and read a buffer from I2C device
// s0: device code
// s1: register address
// s4: buffer pointer
// s5: byte count
// -------------------------------------------------------------------------------
Write1ReadX_I2C:
		CALL	WriteCtrlByte
		CALL	Write_s1		
		
		CALL	RepReadCtrlByte
		
		JUMP	ReadX_tail
		
// -------------------------------------------------------------------------------
// Routine to set up and read a buffer from I2C device
// s0: device code
// s1,s2: register address
// s4: buffer pointer
// s5: byte count
// -------------------------------------------------------------------------------
Write2ReadX_I2C:
		CALL	WriteCtrlByte
		CALL	Write_s1		
		CALL	Write_s2		
		
		CALL	RepReadCtrlByte

		JUMP	ReadX_tail
		
// -------------------------------------------------------------------------------
// Routine to set up and write a buffer to I2C device
// s0: device code
// s4: buffer pointer
// s5: byte count
// -------------------------------------------------------------------------------
WriteX_I2C:
		CALL	WriteCtrlByte
		
.loop:		
		LD	sC, s4			// Load data for TX
		CALL	I2C_Xmit		// Send data and ack
		CALL	I2C_SAck
		ADD	s4, 1
		SUB	s5, 1
		JUMP	NZ, .loop
				
		JUMP	I2C_Stop		// Send stop

// -------------------------------------------------------------------------------
// Routine to set up for and write one byte and read four bytes from I2C device
// s0: device code
// s1: write data byte
// s1: 1st read data byte
// s2: 2nd read data byte
// s3: 3rd read data byte
// s4: 4th read data byte
// -------------------------------------------------------------------------------
Write1Read4_I2C:
		CALL	WriteCtrlByte
		CALL	Write_s1		

		CALL	RepReadCtrlByte

		CALL	I2C_Recv		// Read 8 bits of data and send ack
		CALL	I2C_MAck
		MOVE	s1, sC
		
		CALL	I2C_Recv		// Read 8 bits of data and send ack
		CALL	I2C_MAck
		MOVE	s2, sC
		
		CALL	I2C_Recv		// Read 8 bits of data and send ack
		CALL	I2C_MAck
		MOVE	s3, sC
		
		CALL	I2C_Recv		// Read 8 bits of data and send nack
		CALL	I2C_MNAck
		MOVE	s4, sC
		
		JUMP	I2C_Stop		// Send Stop

// -------------------------------------------------------------------------------
// Routine to set up for and write two bytes to I2C device
// s0: device code
// s1: 1st data byte
// s2: 2nd data byte
// s3: 3rd data byte
// -------------------------------------------------------------------------------
Write3_I2C:
		CALL	WriteCtrlByte
		CALL	Write_s1		
		CALL	Write_s2		
		CALL	Write_s3		
		
		JUMP	I2C_Stop		// Send stop

// -------------------------------------------------------------------------------
// Routine to set up for and read two bytes from I2C device
// s0: device code
// s1: 1st data byte
// s2: 2nd data byte
// -------------------------------------------------------------------------------

Read2_I2C:
		CALL	ReadCtrlByte

		CALL	I2C_Recv		// Read 8 bits of data and send ack
		CALL	I2C_MAck
		MOVE	s1, sC
		
		CALL	ReadN_s2		
		
		JUMP	I2C_Stop		// Send Stop

// -------------------------------------------------------------------------------
// Routine to set up for write one byte and read one byte from I2C device
// s0: device code
// s1: register address
// s1: read data
// -------------------------------------------------------------------------------

Write1Read1_I2C:
		CALL	WriteCtrlByte
		CALL	Write_s1	
		
		CALL	RepReadCtrlByte
		CALL	ReadN_s1		
		
		JUMP	I2C_Stop		// Send Stop

// -------------------------------------------------------------------------------
// Routine to set up for write two bytes and read one byte from I2C device
// s0: device code
// s1, s2: register address
// s1: read data
// -------------------------------------------------------------------------------

Write2Read1_I2C:
		CALL	WriteCtrlByte
		CALL	Write_s1		
		CALL	Write_s2
		
		CALL	RepReadCtrlByte
		CALL	ReadN_s1		
		
		JUMP	I2C_Stop		// Send Stop

// -------------------------------------------------------------------------------
// Routine to set up for and write two bytes to I2C device
// s0: device code
// s1: 1st data byte
// s2: 2nd data byte
// -------------------------------------------------------------------------------
Write2_I2C:
		CALL	WriteCtrlByte
		CALL	Write_s1		
		CALL	Write_s2		
		JUMP	I2C_Stop		// Send stop

// -------------------------------------------------------------------------------
// Routine to set up for and read one byte of I2C device
// s0: device code
// s1: data byte
// -------------------------------------------------------------------------------
Read1_I2C:		
		CALL	ReadCtrlByte		
		CALL	ReadN_s1		
		JUMP	I2C_Stop		// Send Stop

// -------------------------------------------------------------------------------
// Routine to set up for and write one byte to I2C device
// s0: device code
// s1: data byte
// -------------------------------------------------------------------------------
Write1_I2C:	
		CALL	WriteCtrlByte	
		CALL	Write_s1		
		JUMP	I2C_Stop		// Send stop
		
// -------------------------------------------------------------------------------
// write s1
// -------------------------------------------------------------------------------	
Write_s1:
		MOVE	sC, s1			// Load data for TX
		CALL	I2C_Xmit		// Send data and ack
		JUMP	I2C_SAck
		
// -------------------------------------------------------------------------------
// write s2
// -------------------------------------------------------------------------------	
Write_s2:
		MOVE	sC, s2			// Load data for TX
		CALL	I2C_Xmit		// Send data and ack
		JUMP	I2C_SAck
		
// -------------------------------------------------------------------------------
// write s3
// -------------------------------------------------------------------------------	
Write_s3:
		MOVE	sC, s3			// Load data for TX
		CALL	I2C_Xmit		// Send data and ack
		JUMP	I2C_SAck
		
// -------------------------------------------------------------------------------
// read s1
// -------------------------------------------------------------------------------	
ReadN_s1:
		CALL	I2C_Recv		// Read 8 bits of data and send ack
		CALL	I2C_MNAck
		MOVE	s1, sC
		RET
		
// -------------------------------------------------------------------------------
// read s2
// -------------------------------------------------------------------------------	
ReadN_s2:
		CALL	I2C_Recv		// Read 8 bits of data and send ack
		CALL	I2C_MNAck
		MOVE	s2, sC
		RET
		
// -------------------------------------------------------------------------------
// read s3
// -------------------------------------------------------------------------------	
ReadN_s3:
		CALL	I2C_Recv		// Read 8 bits of data and send ack
		CALL	I2C_MNAck
		MOVE	s3, sC
		RET
		
// -------------------------------------------------------------------------------
// START, RCONTROL
// -------------------------------------------------------------------------------	
ReadCtrlByte:
		CALL	I2C_Start		// Send start, control byte and ack
		MOVE	sC, s0			// Load address for TX
		SL1	sC			// add read flag
		CALL	I2C_Xmit		// Send address and ack
		JUMP	I2C_SAck
		
// -------------------------------------------------------------------------------
// REPSTART, RCONTROL
// -------------------------------------------------------------------------------	
RepReadCtrlByte:
		CALL	I2C_RepStart		// Send repeated start, control byte and ack
		MOVE	sC, s0			// Load device code for RX
		SL1	sC			// add read flag
		CALL	I2C_Xmit		// Send address and ack
		JUMP	I2C_SAck
		
// -------------------------------------------------------------------------------
// START, WCONTROL
// -------------------------------------------------------------------------------	
WriteCtrlByte:
		CALL	I2C_Start		// Send start, control byte and ack
		MOVE	sC, s0			// Load device code for TX
		SL0	sC			// add write flag
		CALL	I2C_Xmit		// Send address and ack
		JUMP	I2C_SAck

// -------------------------------------------------------------------------------
// Transmit 8 bits of I2C data
// -------------------------------------------------------------------------------
I2C_Xmit:
		MOVE    sD, 8			// Load I2C bit counter
I2C_TX:
		CALL    I2C_Delay
		SL0     sC			// Move data bit -> carry
		JUMP    C, I2C_TX1		// Jump if bit high
I2C_TX0:
		OUT     sF, bSDA_0		// SDA = 0
		JUMP    I2C_TX2			// Jump over next instructions
I2C_TX1:
		OUT     sF, bSDA_Z		// SDA = 1 due to pull-up
I2C_TX2:
		CALL    I2C_Delay

		OUT     sF, bSCL_Z		// SCL = 1 due to pull-up
		CALL	I2C_Stretch
		CALL    I2C_Delay
		CALL    I2C_Delay
		OUT     sF, bSCL_0		// SCL = 0

		SUB     sD, 1			// Decrement I2C bit counter
		JUMP    NZ, I2C_TX		// Loop until 8 bits are sent
		JUMP    I2C_Delay

// -------------------------------------------------------------------------------
// Read 8 bits of I2C data
// -------------------------------------------------------------------------------
I2C_Recv:	
		MOVE	sD, 8			// Load I2C bit counter
		CALL	I2C_Delay	
		OUT     sF, bSDA_Z		// SDA = 1 due to pull-up
		
I2C_RX:
		CALL	I2C_Delay	
		OUT	sF, bSCL_Z		// SCL = 1 due to pull-up
		CALL	I2C_Stretch
		CALL	I2C_Delay
		IN	sF, bSDA_In
		CALL	I2C_Delay
		OUT	sF, bSCL_0		// SCL = 0
		SR0	sF			// LSBit -> carry bit
		SLA	sC			// Carry shifted into LSBit
		CALL	I2C_Delay
		SUB	sD, 1			// Decrement I2C bit counter
		JUMP	NZ, I2C_RX		// Loop until 8 bits are read
		RET

// -------------------------------------------------------------------------------
// Ack by master, keep data 0
// -------------------------------------------------------------------------------
I2C_MAck:	
		CALL    I2C_Delay
		OUT     sF, bSDA_0		// SDA = 0
		CALL    I2C_Delay
		OUT	sF, bSCL_Z		// SCL = 1 due to pull-up
		CALL	I2C_Stretch
		CALL    I2C_Delay
		CALL    I2C_Delay
		OUT	sF, bSCL_0		// SCL = 0
		CALL	I2C_Delay
		OUT     sF, bSDA_0		// SDA = 0
		RET

// -------------------------------------------------------------------------------
// NAck by master, release data 
// -------------------------------------------------------------------------------
I2C_MNAck:	
		CALL    I2C_Delay
		OUT     sF, bSDA_Z		// SDA = 1 due to pull-up
		CALL    I2C_Delay
		OUT	sF, bSCL_Z		// SCL = 1 due to pull-up
		CALL	I2C_Stretch
		CALL    I2C_Delay
		CALL    I2C_Delay
		OUT	sF, bSCL_0		// SCL = 0
		CALL	I2C_Delay
		OUT     sF, bSDA_0		// SDA = 0
		RET

// -------------------------------------------------------------------------------
// Ack by slave, release data
// -------------------------------------------------------------------------------
I2C_SAck:
		CALL    I2C_Delay
		OUT     sF, bSDA_Z		// SDA = 1 due to pull-up
		CALL    I2C_Delay
		OUT	sF, bSCL_Z		// SCL = 1 due to pull-up
		CALL	I2C_Stretch
		CALL    I2C_Delay
		CALL    I2C_Delay
		OUT	sF, bSCL_0		// SCL = 0
		JUMP	I2C_Delay
// -------------------------------------------------------------------------------
// Set up start condition for I2C
// -------------------------------------------------------------------------------
I2C_Stretch:
		CALL    I2C_Delay
		IN	sF, bSDA_In		// wait for SCL to go high
		TEST	sF, 0b0000_0010
		JUMP	Z, I2C_Stretch
		RET

// -------------------------------------------------------------------------------
// Set up start condition for I2C
// -------------------------------------------------------------------------------

// SCL and SDA set to inputs, signals go high due to pull-up resistors

I2C_RepStart:
		CALL	I2C_Delay
		OUT	sF, bSCL_Z		// SCL = Z due to pull-up
I2C_Start:
		CALL	I2C_Delay
		OUT	sF, bSDA_0		// SDA = 0
		CALL	I2C_Delay
		OUT	sF, bSCL_0		// SCL = 0
		JUMP	I2C_Delay

// -------------------------------------------------------------------------------
// Send I2C stop command
// -------------------------------------------------------------------------------
I2C_Stop:
		CALL	I2C_Delay
		OUT	sF, bSDA_0		// SDA = 0
		CALL	I2C_Delay
		OUT	sF, bSCL_Z		// SCL = 1 due to pull-up
		CALL	I2C_Stretch
		OUT	sF, bSDA_Z		// SDA = 1 due to pull-up
		JUMP	I2C_Delay
		
		
// -------------------------------------------------------------------------------
// Delay needed for I2C
// -------------------------------------------------------------------------------
I2C_Delay:	
		CALL	Delay6			// 1 + 2^6 + 2^4 - 1 => 80 instructions
		JUMP	Delay4

		.FI

// -----------I2C Subroutines end-------------------------------------------------
